// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package response

import (
	json "encoding/json"
	models "github.com/WebGameLinux/cms/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9af65625DecodeGithubComWebGameLinuxCmsDtoResponse(in *jlexer.Lexer, out *UserFilterRespJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "email":
			out.Email = string(in.String())
		case "username":
			out.UserName = string(in.String())
		case "mobile":
			out.Mobile = string(in.String())
		case "gender":
			out.Gender = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "seq_id":
			out.SeqId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9af65625EncodeGithubComWebGameLinuxCmsDtoResponse(out *jwriter.Writer, in UserFilterRespJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"mobile\":"
		out.RawString(prefix)
		out.String(string(in.Mobile))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.Int(int(in.Gender))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"seq_id\":"
		out.RawString(prefix)
		out.String(string(in.SeqId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserFilterRespJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9af65625EncodeGithubComWebGameLinuxCmsDtoResponse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserFilterRespJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9af65625EncodeGithubComWebGameLinuxCmsDtoResponse(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserFilterRespJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9af65625DecodeGithubComWebGameLinuxCmsDtoResponse(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserFilterRespJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9af65625DecodeGithubComWebGameLinuxCmsDtoResponse(l, v)
}
func easyjson9af65625DecodeGithubComWebGameLinuxCmsDtoResponse1(in *jlexer.Lexer, out *LoginRespJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(models.User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "authorization":
			out.Auth = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9af65625EncodeGithubComWebGameLinuxCmsDtoResponse1(out *jwriter.Writer, in LoginRespJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"authorization\":"
		out.RawString(prefix)
		out.String(string(in.Auth))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginRespJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9af65625EncodeGithubComWebGameLinuxCmsDtoResponse1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginRespJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9af65625EncodeGithubComWebGameLinuxCmsDtoResponse1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginRespJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9af65625DecodeGithubComWebGameLinuxCmsDtoResponse1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginRespJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9af65625DecodeGithubComWebGameLinuxCmsDtoResponse1(l, v)
}
func easyjson9af65625DecodeGithubComWebGameLinuxCmsDtoResponse2(in *jlexer.Lexer, out *LoginFilterRespJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(UserFilterRespJson)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "authorization":
			out.Auth = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9af65625EncodeGithubComWebGameLinuxCmsDtoResponse2(out *jwriter.Writer, in LoginFilterRespJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"authorization\":"
		out.RawString(prefix)
		out.String(string(in.Auth))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginFilterRespJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9af65625EncodeGithubComWebGameLinuxCmsDtoResponse2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginFilterRespJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9af65625EncodeGithubComWebGameLinuxCmsDtoResponse2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginFilterRespJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9af65625DecodeGithubComWebGameLinuxCmsDtoResponse2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginFilterRespJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9af65625DecodeGithubComWebGameLinuxCmsDtoResponse2(l, v)
}
