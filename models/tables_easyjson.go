// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "email":
			out.Email = string(in.String())
		case "username":
			out.UserName = string(in.String())
		case "mobile":
			out.Mobile = string(in.String())
		case "passwordHash":
			out.PasswordHash = string(in.String())
		case "version":
			out.Version = int(in.Int())
		case "gender":
			out.Gender = int(in.Int())
		case "deleted_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeletedAt).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "seq_id":
			out.SeqId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"mobile\":"
		out.RawString(prefix)
		out.String(string(in.Mobile))
	}
	{
		const prefix string = ",\"passwordHash\":"
		out.RawString(prefix)
		out.String(string(in.PasswordHash))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.Int(int(in.Gender))
	}
	{
		const prefix string = ",\"deleted_at\":"
		out.RawString(prefix)
		out.Raw((in.DeletedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"seq_id\":"
		out.RawString(prefix)
		out.String(string(in.SeqId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels(l, v)
}
func easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels1(in *jlexer.Lexer, out *RBac) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels1(out *jwriter.Writer, in RBac) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RBac) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RBac) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RBac) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RBac) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels1(l, v)
}
func easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels2(in *jlexer.Lexer, out *MenuTree) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subMenus":
			if in.IsNull() {
				in.Skip()
				out.SubMenus = nil
			} else {
				in.Delim('[')
				if out.SubMenus == nil {
					if !in.IsDelim(']') {
						out.SubMenus = make([]MenuTree, 0, 1)
					} else {
						out.SubMenus = []MenuTree{}
					}
				} else {
					out.SubMenus = (out.SubMenus)[:0]
				}
				for !in.IsDelim(']') {
					var v1 MenuTree
					(v1).UnmarshalEasyJSON(in)
					out.SubMenus = append(out.SubMenus, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "info":
			out.Info = string(in.String())
		case "pid":
			out.Pid = int(in.Int())
		case "sort":
			out.Sort = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels2(out *jwriter.Writer, in MenuTree) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"subMenus\":"
		out.RawString(prefix[1:])
		if in.SubMenus == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.SubMenus {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		out.String(string(in.Info))
	}
	{
		const prefix string = ",\"pid\":"
		out.RawString(prefix)
		out.Int(int(in.Pid))
	}
	{
		const prefix string = ",\"sort\":"
		out.RawString(prefix)
		out.Int(int(in.Sort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MenuTree) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MenuTree) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MenuTree) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MenuTree) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels2(l, v)
}
func easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels3(in *jlexer.Lexer, out *MenuModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "deleted_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeletedAt).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "info":
			out.Info = string(in.String())
		case "pid":
			out.Pid = int(in.Int())
		case "sort":
			out.Sort = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels3(out *jwriter.Writer, in MenuModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"deleted_at\":"
		out.RawString(prefix[1:])
		out.Raw((in.DeletedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		out.String(string(in.Info))
	}
	{
		const prefix string = ",\"pid\":"
		out.RawString(prefix)
		out.Int(int(in.Pid))
	}
	{
		const prefix string = ",\"sort\":"
		out.RawString(prefix)
		out.Int(int(in.Sort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MenuModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MenuModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MenuModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MenuModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels3(l, v)
}
func easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels4(in *jlexer.Lexer, out *Menu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "info":
			out.Info = string(in.String())
		case "pid":
			out.Pid = int(in.Int())
		case "sort":
			out.Sort = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels4(out *jwriter.Writer, in Menu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		out.String(string(in.Info))
	}
	{
		const prefix string = ",\"pid\":"
		out.RawString(prefix)
		out.Int(int(in.Pid))
	}
	{
		const prefix string = ",\"sort\":"
		out.RawString(prefix)
		out.Int(int(in.Sort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Menu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Menu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Menu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Menu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels4(l, v)
}
func easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels5(in *jlexer.Lexer, out *Logs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "payloads":
			out.Payloads = string(in.String())
		case "happen_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.HappenAt).UnmarshalJSON(data))
			}
		case "deleted_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeletedAt).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "seq_id":
			out.SeqId = string(in.String())
		case "state":
			out.State = int(in.Int())
		case "id":
			out.Id = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels5(out *jwriter.Writer, in Logs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"payloads\":"
		out.RawString(prefix[1:])
		out.String(string(in.Payloads))
	}
	{
		const prefix string = ",\"happen_at\":"
		out.RawString(prefix)
		out.Raw((in.HappenAt).MarshalJSON())
	}
	{
		const prefix string = ",\"deleted_at\":"
		out.RawString(prefix)
		out.Raw((in.DeletedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"seq_id\":"
		out.RawString(prefix)
		out.String(string(in.SeqId))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Logs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Logs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB109ec67EncodeGithubComWebGameLinuxCmsModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Logs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Logs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB109ec67DecodeGithubComWebGameLinuxCmsModels5(l, v)
}
