// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package redis

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson24099d24DecodeGithubComWebGameLinuxCmsUtilsRedis(in *jlexer.Lexer, out *RedisOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "network":
			out.Network = string(in.String())
		case "addr":
			out.Addr = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "db":
			out.DB = int(in.Int())
		case "max_retries":
			out.MaxRetries = int(in.Int())
		case "min_retry_backoff":
			out.MinRetryBackoff = time.Duration(in.Int64())
		case "max_retry_backoff":
			out.MaxRetryBackoff = time.Duration(in.Int64())
		case "dial_timeout":
			out.DialTimeout = time.Duration(in.Int64())
		case "read_timeout":
			out.ReadTimeout = time.Duration(in.Int64())
		case "write_timeout":
			out.WriteTimeout = time.Duration(in.Int64())
		case "pool_size":
			out.PoolSize = int(in.Int())
		case "min_idle_conns":
			out.MinIdleConns = int(in.Int())
		case "max_conn_age":
			out.MaxConnAge = time.Duration(in.Int64())
		case "pool_timeout":
			out.PoolTimeout = time.Duration(in.Int64())
		case "idle_timeout":
			out.IdleTimeout = time.Duration(in.Int64())
		case "idle_check_frequency":
			out.IdleCheckFrequency = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24099d24EncodeGithubComWebGameLinuxCmsUtilsRedis(out *jwriter.Writer, in RedisOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"network\":"
		out.RawString(prefix[1:])
		out.String(string(in.Network))
	}
	{
		const prefix string = ",\"addr\":"
		out.RawString(prefix)
		out.String(string(in.Addr))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"db\":"
		out.RawString(prefix)
		out.Int(int(in.DB))
	}
	{
		const prefix string = ",\"max_retries\":"
		out.RawString(prefix)
		out.Int(int(in.MaxRetries))
	}
	{
		const prefix string = ",\"min_retry_backoff\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinRetryBackoff))
	}
	{
		const prefix string = ",\"max_retry_backoff\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxRetryBackoff))
	}
	{
		const prefix string = ",\"dial_timeout\":"
		out.RawString(prefix)
		out.Int64(int64(in.DialTimeout))
	}
	{
		const prefix string = ",\"read_timeout\":"
		out.RawString(prefix)
		out.Int64(int64(in.ReadTimeout))
	}
	{
		const prefix string = ",\"write_timeout\":"
		out.RawString(prefix)
		out.Int64(int64(in.WriteTimeout))
	}
	{
		const prefix string = ",\"pool_size\":"
		out.RawString(prefix)
		out.Int(int(in.PoolSize))
	}
	{
		const prefix string = ",\"min_idle_conns\":"
		out.RawString(prefix)
		out.Int(int(in.MinIdleConns))
	}
	{
		const prefix string = ",\"max_conn_age\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxConnAge))
	}
	{
		const prefix string = ",\"pool_timeout\":"
		out.RawString(prefix)
		out.Int64(int64(in.PoolTimeout))
	}
	{
		const prefix string = ",\"idle_timeout\":"
		out.RawString(prefix)
		out.Int64(int64(in.IdleTimeout))
	}
	{
		const prefix string = ",\"idle_check_frequency\":"
		out.RawString(prefix)
		out.Int64(int64(in.IdleCheckFrequency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedisOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson24099d24EncodeGithubComWebGameLinuxCmsUtilsRedis(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RedisOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson24099d24EncodeGithubComWebGameLinuxCmsUtilsRedis(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedisOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson24099d24DecodeGithubComWebGameLinuxCmsUtilsRedis(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RedisOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson24099d24DecodeGithubComWebGameLinuxCmsUtilsRedis(l, v)
}
